<!DOCTYPE html>
<html lang=en>
<head>
  <meta http-equiv=content-type content="text/html; charset=utf-8" />
  <meta name=viewport content="width=device-width, initial-scale=1">

  <title>${meta.title} REST Documentation</title>
  <style type="text/css">
  /* styles for the page */

  body {
    font-family: "Open Sans", Helvetica, sans-serif;
    font-size: 14px;
    padding: 0px;
    margin: 0px;
  }

  header {
    padding: 20px;
  }

  h1 {
    background-color: #2075b1;
    margin: 0px;
    padding: 15px;
    font-size: larger;
    color: white;
  }

  h2 {
    font-size: larger;
    margin-top: 35px;
  }

  summary {
    background-color: #24425c;
    padding: 20px;
    padding-top:30px;
    color: #ccc;
  }

  .toc li {
    padding: 2px 0;
  }

  .toc a {
    color: #333;
    padding: 1px 0;
    text-decoration: underline;
  }

  .center {
    max-width: 1000px;
    margin: 0 auto;
  }

  pre {
    white-space: pre-wrap;
    word-wrap: break-word;
    font-size: small
  }

  table.method {
    width: 100%;
    margin-bottom:15px;
  }

  table.testing {
    width: 96%;
    border: 1px solid #CCC;
    padding: 5px;
  }

  th, td {
    padding: 7px;
    vertical-align: middle;
    border-bottom: 1px solid #ccc;
    text-align: left;
  }

  th:first-of-type {
    width: 20%;
    text-align: right;
  }

  thead th {
    background-color: #ddd;
    font-weight: bold;
  }

  table ul {
    margin: 0;
    padding: 0 20px;
  }

  .hidden {
    display: none;
  }

  div.spaced {
    margin: 4px 0px;
  }

  td.form_label {
    width: 10%;
  }
  </style>
</head>
<body>
<header class=center>
  <a href=/>
  <img src=/img/logo/opencast.svg alt=Opencast style="width: 180px;" />
  </a>
</header>

<h1><div class=center>${meta.title} REST Documentation</div></h1>

<summary>
  <div class=center>
    <div>${meta.url}</div>
    <div>${(meta.abstract)!}</div>
  </div>
</summary>

<main class=center>

<!-- GENERAL NOTES -->
<#list notes>
<h2>General Notes</h2>
<ul>
  <#items as note>
  <li>${note}</li>
  </#items>
</ul>
</#list>

<!-- TABLE OF CONTENTS -->

<h2>Table of Contents</h2>
<ul class="toc">
  <#list endpointHolders as endpointHolder>
  <#list endpointHolder.endpoints as endpoint>
  <li><a href="#${endpoint.name}-${endpoint?counter}">${endpoint.method} ${endpoint.path}</a></li>
  </#list>
  </#list>
</ul>

<!-- ENDPOINTS -->

<#list endpointHolders as endpointHolder>
<#list endpointHolder.endpoints>
<h2>${endpointHolder.title} methods</h2>
<#items as endpoint>
<table id="${endpoint.name}-${endpoint?counter}" class="method" cellpadding="0px" cellspacing="0px"
  summary="${endpointHolder.title} function for the ${endpoint.method} ${endpoint.path} REST endpoint, Name of the attribute followed by the value">
  <thead>
    <tr>
      <th>Method / Path:</th>
      <th title="${meta.url}${endpoint.path}">${endpoint.method} ${endpoint.path}</th>
    </tr>
  </thead>
  <tbody>
    <tr class="method">
      <th scope="row">Description:</th>
      <td>${endpoint.description!"<em>NONE</em>"}</td>
    </tr>
    <tr class="method">
      <th class="method_important" scope="row">Path params:</th>
      <td>
        <#list endpoint.pathParams as param>
        <tt>${param.name}<#if param.defaultValue??>&#40;Default value=${param.escapedDefaultValue}&#41;</#if></tt>:
        ${param.description!"<em>NONE</em>"}<#sep><br/></#sep>
        <#else>
        <em>NONE</em>
        </#list>
      </td>
    </tr>
    <#if (endpoint.requiredParams?size > 0)>
    <tr class="method">
      <th class="method_important" scope="row">Required (form) params:</th>
      <td>
        <#list endpoint.requiredParams as param>
        <tt>
          ${param.name}: ${param.description!""}
          <#if param.xmlSchema??>
            <div>
              <a href="#" class="show_form_link">XML Schema</a>
              <div class="hidden_form hidden">
                <#if param.escapedXmlSchema??><pre>${param.escapedXmlSchema}</pre></#if>
              </div>
              <a href="#" class="hide_form_link hidden">Hide</a>
            </div>
          </#if>
        </tt><#if param_has_next> <br/></#if>
        </#list>
      </td>
    </tr>
    </#if>
    <#if endpoint.bodyParam??>
    <tr class="method">
      <th class="method_important" scope="row">Body (upload) param:</th>
      <td>
        <#if endpoint.bodyParam.defaultValue??>
        <tt>&#40;Default value=${endpoint.bodyParam.escapedDefaultValue}&#41;</tt>:
        </#if>${endpoint.bodyParam.description!"<em>NONE</em>"}
      </td>
    </tr>
    </#if>
    <tr class="method">
      <th scope="row">Optional (<#if (endpoint.method == "GET")>query<#else>form</#if>) params:</th>
      <td>
        <#list endpoint.optionalParams as param>
        <tt>${param.name}<#if param.defaultValue??>&#40;Default value=${param.escapedDefaultValue}&#41;</#if></tt>:
        ${param.description!"<em>NONE</em>"}<#sep> <br/></#sep>
        <#else>
        <em>NONE</em>
        </#list>
      </td>
    </tr>
    <#if (endpoint.formats?size > 0)>
    <tr class="method">
      <th scope="row">Response formats:</th>
      <td>
        <#list endpoint.formats as format>
        <#if format.url??><a href="${format.url}">${format.name}</a><#else>${format.name}</#if>
        <#if format.description??>(${format.description})</#if><#sep><br/></#sep>
        </#list>
      </td>
    </tr>
    </#if>
    <tr class="method">
      <th scope="row">Status codes:</th>
      <td>
        <#list endpoint.statuses as status>
        <tt>${status.code}: ${status.name}</tt>, ${status.description!"<em>NONE</em>"}<#if status_has_next> <br/></#if>
        <#else>
        <em>NONE</em>
        </#list>
      </td>
    </tr>
    <#if (endpoint.returnTypeSchema??)>
      <tr class="method">
        <th scope="row">Returned Entity Schema:</th>
        <td>
          <div>
            <a href="#" class="show_form_link">Click to view</a>
            <div class="hidden_form hidden">
              <#if endpoint.escapedReturnTypeSchema??><pre>${endpoint.escapedReturnTypeSchema}</pre></#if>
            </div>
            <a href="#" class="hide_form_link hidden">Hide</a>
          </div>
        </td>
      </tr>
    </#if>
    <#if (endpoint.notes?size > 0)>
    <tr class="method">
      <th scope="row">Notes:</th>
      <td>
        <ul>
          <#list endpoint.notes as note>
          <li>${note}</li>
          </#list>
        </ul>
      </td>
    </tr>
    </#if>
    <tr class="method testform">
      <th scope="row">Testing:</th>
      <td>
        <div class="spaced"><strong>Sample:</strong>
        <tt class="sample_url">${endpoint.path}${endpoint.queryString!}</tt>
        </div>
        <#if endpoint.form??>
        <#if (endpoint.form.basic)><#-- link to the basic endpoint path -->
        <a href="${meta.url}${endpoint.path}${endpoint.queryString!}">${meta.url}${endpoint.path}${endpoint.queryString!}</a>
        <#else>
        <a href="#" class="show_form_link">Testing form (click to reveal)</a>
        <div class="hidden_form hidden">
          <form id="form_${endpoint.name}-${endpoint?counter}"
                class="form_test_form"
                action="${meta.url}${endpoint.path}"
                method="${endpoint.method?lower_case}"<#if endpoint.form.fileUpload> enctype="multipart/form-data"</#if>>
            <input class="form_action_holder" type="hidden" value="${meta.url}${endpoint.path}" />
            <input class="form_endpoint_name" type="hidden" value="${endpoint.name}-${endpoint?counter}" />
            <input class="form_method" type="hidden" value="${endpoint.method}" />
            <#if (endpoint.form.ajaxSubmit)>
            <input class="form_ajax_submit" type="hidden" value="1" />
            </#if>
            <div class="spaced">
                <strong>Form action:</strong> <tt class="form_path">${meta.url}${endpoint.path}</tt>
            </div>
            <table class="testing" cellpadding="0" cellspacing="0">
              <#list endpoint.form.items as item>
              <tr class="form_field <#if item.required>form_required<#else>form_optional</#if>">
                <#if item.type == "text">
                <td class="form_textarea" colspan="3">
                  <label for="${endpoint.name}-${endpoint?counter}_${item.name}">${item.name}</label>:<br/>
                  <textarea id="${endpoint.name}-${endpoint?counter}_${item.name}"
                            name="${item.name}"
                            class="form_field_text form_param_submit<#if item.required> form_param_required</#if>"
                            rows="<#if item.attributes.rows??>${item.attributes.rows}<#else><#if item.name == "BODY">8<#else>3</#if></#if>"
                            cols="${(item.attributes.cols)!'80'}">${item.defaultValue!}</textarea>
                  <div class="form_field_description">${item.description!}</div>
                </td>
                <#elseif item.type == "boolean">
                <td class="form_label">
                  <#if item.required><span title="required">*</span>&nbsp;</#if><label for="${endpoint.name}-${endpoint?counter}_${item.name}">${item.name}</label>:
                </td>
                <td>
                  <input id="${endpoint.name}-${endpoint?counter}_${item.name}"
                         name="${item.name}"
                         class="form_field <#if item.path>form_param_path<#else>form_param_submit</#if><#if item.required> form_param_required</#if>"
                         type="checkbox"
                         value="true" <#if item.defaultValue??>checked="${item.defaultValue}" defaultChecked="${item.defaultValue}"</#if> />
                </td>
                <td class="form_field_description">${item.description!}</td>
                <#elseif item.type == "file">
                <td class="form_label">
                  <#if item.required><span title="required">*</span>&nbsp;</#if><label for="${endpoint.name}-${endpoint?counter}_${item.name}">${item.name}</label>:
                </td>
                <td>
                  <input id="${endpoint.name}-${endpoint?counter}_${item.name}"
                         name="${item.name}"
                         class="form_field_file"
                         class="form_field form_param_upload<#if item.required> form_param_required</#if>"
                         type="file" />
                </td>
                <td class="form_field_description">${item.description!}</td>
                <#else>
                <td class="form_label">
                  <#if item.required><span title="required">*</span>&nbsp;</#if><label for="${endpoint.name}-${endpoint?counter}_${item.name}">${item.name}</label>:
                </td>
                <td>
                  <input id="${endpoint.name}-${endpoint?counter}_${item.name}"
                         class="form_field <#if item.path>form_param_path<#else>form_param_submit</#if><#if item.required> form_param_required</#if>"
                         name="${item.name}"
                         type="text"
                         value="${item.defaultValue!}"
                         size="${(item.attributes.size)!'30'}" />
                </td>
                <td class="form_field_description">${item.description!}</td>
                </#if>
              </tr>
              </#list>
              <tr>
                <td colspan="3">
                  <div class="form_submit">
                    <input type="submit" value="SUBMIT" />
                    <input type="button" value="CANCEL" />
                  </div>
                </td>
              </tr>
            </table>
          </form>
          <#if (endpoint.form.ajaxSubmit)>
          <div class="test_form_working hidden">... WORKING ...</div>
          <div class="test_form_response hidden">
            <div>Response:</div>
            <pre style="width: 100%; border-left: 4px solid #999; padding-left: 10px;"></pre>
          </div>
          </#if>
        </div>
        <a href="#" class="hide_form_link hidden">Hide</a>
        </#if>
      </td>
    </tr>
    </#if>
  </tbody>
</table>

</#items>
</#list>
</#list>

</main>

<!-- JAVASCRIPT below here -->
<script type="text/javascript" src="js/jquery/jquery.js"></script>
<script type="text/javascript">
function tryPretty(data) {
  try {
    var obj = JSON.parse(data)
    return JSON.stringify(obj, undefined, 2).toString();
  } catch(err) {
    return data;
  }
}

$(document).ready(function() {

    $("a.show_form_link").click(
        function() {
           var $this = $(this);
           var $form = $this.parent().find("div.hidden_form");
           var $hidectrl = $this.parent().find("a.hide_form_link");
           $form.toggle(400);
           $hidectrl.show();
           $this.parent().find("div.form_submit input[type='button']").click(
              function() {
                 $form.hide(200);
                 $this.show();
              }
           );
           $this.hide();
           return false;
        }
    );

    $("a.hide_form_link").click(
        function() {
           var $this = $(this);
           var $form = $this.parent().find("div.hidden_form");
           var $show_form_ctrl = $this.parent().find("a.show_form_link");
           $form.hide(200);
           $show_form_ctrl.show();
           $this.hide();
           return false;
        }
     );

    /**
     * Takes a path and integrates the pathParams values into it
     * @param {String} path the path with keys (e.g. /my/{thing}/{stuff})
     * @param {Array} params the params to put into the path (e.g. {'thing':'apple'})
     */
    function updatePath(path, params) {
        var newPath = path;
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                var value = params[key];
                if (value !== undefined && value !== null && value !== '') {
          // The Regex here handles syntax like /episode.{format:xml|json}.
          // In this case, the {format:xml|json} part is extracted, then
          // the xml|json part is used as the second regex to verify user's input.
          // If the input is valid, the path /episode.{format:xml|json} would be
          // replaced by /episode.xml for example.
                    var regex = new RegExp( "{" + key + "(:[^}]*|)}", "");
                    if (regex.test(newPath))
                    {
                         var pat = regex.exec(newPath)[1].substring(1);
                         var regex2 = new RegExp(pat, "");
                         if (regex2.test(value))
                         {
                           newPath = newPath.replace(regex, value);
                         } else
                         {
                           alert('The value for ' + key + ' is invalid.');
                         }
                    } else
                    {
                         alert("wrong syntax");
                    }
                }
            }
        }
        return newPath;
    }

    function checkPath($form) {
        var params = [];
        $form.find(".form_param_path").each( function() {
            var $param = $(this);
            params[$param.attr('name')] = $param.val();
        });
        var form_path = $form.find("input.form_action_holder").val();
        var path = updatePath(form_path, params);
        // update form and display
        $form.attr('action', path);
        $form.find(".form_path").html(path);
        if (path.indexOf("{") >= 0 && path.indexOf("}") >= 0) {
            return false;
        }
        return true;
    }
    function checkRequired($form) {
        // check all required items
        var $required = $form.find(".form_param_required");
        var total = $required.length;
        var counter = 0;
        $required.each( function() {
            var $this = $(this);
            if ($this.val() !== null && $this.val() !== '') {
                counter++;
            }
        });
        var $formInputs = $form.find("div.form_submit input");
        if (counter >= total) {
            // submit is ok
            $formInputs.removeAttr('disabled');
            return true;
        } else {
            // disable form submit until required options at set
            $formInputs.attr('disabled', 'disabled');
            return false;
        }
    }
    // do operation on all testing forms
    $("form.form_test_form").each( function() {
        var $form = $(this);
        if ($form.find("input.form_action_holder").length >= 1) {
            // now find and put the event handler on all path params
            $form.find(".form_param_path").change( function() {
              checkPath($form);
            });
            // run the checkPath method
            checkPath($form);
            var $reqParams = $form.find(".form_param_required");
            if ($reqParams.length > 0) {
                // add required options checks
                $reqParams.change( function(){
                    checkRequired($form);
                }).keyup( function(){
                    checkRequired($form);
                });
            }
            // run the check required
            checkRequired($form);
            // handle the ajax submissions
            if ($form.find("input.form_ajax_submit").length >= 1) {
              // the form will use ajax submit
              //var form_key = $form.find("input.form_endpoint_name").val();
              // add an event handler to the form submit
              $form.bind('submit', function() {
                  if ( checkRequired($form) ) {
                      var submitParams = {};
                      $form.find(".form_param_submit").each( function() {
                          var $param = $(this);
                          var $value = $param.val();
                          if (this.type == 'checkbox' && !this.checked) {
                            $value = "false";
                          }
                          submitParams[$param.attr('name')] = $value;
                      });
                      //alert("params: " + $.param(submitParams));
                      var method = $form.find(".form_method").val();
                      var url = $form.attr('action');
                      $form.parent().find(".test_form_working").show();
                      $form.parent().find(".test_form_response input").click(function(){
                          $(this).parent.hide();
                          $this.parent().find("a.hide_form_link").hide();
                      });

                      // clear previous responses
                      var responseBody = $form.parent().find(".test_form_response");
                      responseBody.hide();
                      responseBody.find("pre").text("");

                      // make the request
                      $.ajax({
                          type: method,
                          url: url,
                          processData: true,
                          dataType: 'text',
                          data: submitParams,
                          success: function(data, textStatus, request) {
                              $form.parent().find(".test_form_working").hide();
                              var responseBody = $form.parent().find(".test_form_response");
                              data = tryPretty(data);
                              responseBody.show();
                              var msg = "Status: " + request.status + " (" + request.statusText + ")\n\n" + data;
                              responseBody.find("pre").text(msg);
                          },
                          error: function(request, textStatus, errorThrown) {
                              $form.parent().find(".test_form_working").hide();
                              var responseBody = $form.parent().find(".test_form_response");
                              var msg = "Status: " + request.status + " (" + request.statusText + ")";
                              responseBody.show();
                              responseBody.find("pre").text(msg);
                          }
                      });
                  } else {
                      alert("Fill out all required fields first");
                  }
                  return false;
              });
            }
        }
    });
});
</script>

</body>
</html>
